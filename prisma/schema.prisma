// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id               String    @id @default(uuid())
  email            String    @unique
  name             String
  password         String
  phone            String?   @unique
  role             String    @default("user")
  language         String    @default("en")
  location         String?
  resetToken       String?
  resetTokenExpiry DateTime?
  preferences      UserPreferences?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  farms            Farm[]
  isVerified       Boolean  @default(false)

  // Relations
  queries          Query[]
  favorites        Favorite[]
  conversations    Conversation[]
  subscriptions    Subscription[]
}

model Query {
  id        String   @id @default(uuid())
  text      String
  response  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  type      String   // crop, weather, market, etc.
  data      Json     // Flexible storage for different types of favorites
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model UserPreferences {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  language        String   @default("en")
  voiceEnabled    Boolean  @default(false)
  weatherAlerts   Boolean  @default(true)
  priceAlerts     Boolean  @default(true)
  cropReminders   Boolean  @default(true)
  preferredCrops  String[]
  preferredMarkets String[]
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String
  role           String   // 'user' | 'assistant'
  language       String   @default("hi")
  messageType    String   @default("text") // 'text' | 'voice' | 'image'
  metadata       Json?
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MarketPrice {
  id         String   @id @default(cuid())
  crop       String
  variety    String?
  market     String
  state      String
  district   String?
  price      Float
  unit       String   @default("quintal")
  date       DateTime
  source     String   @default("agmarknet")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([crop, market, date])
  @@index([crop, market, date])
  @@index([state, date])
  @@map("market_prices")
}

model WeatherAlert {
  id          String   @id @default(cuid())
  location    String
  alertType   String   // 'rain', 'temperature', 'humidity', etc.
  severity    String   // 'low', 'medium', 'high'
  message     String
  startTime   DateTime
  endTime     DateTime
  source      String   @default("imd")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([location, startTime])
  @@map("weather_alerts")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'weather', 'market', 'crop'
  status    String   @default("active")
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CropGuidance {
  id          String   @id @default(cuid())
  crop        String
  stage       String   // 'sowing', 'growing', 'harvesting'
  guidance    String
  language    String   @default("hi")
  season      String?
  region      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([crop, stage, language])
  @@map("crop_guidance")
}

model Farm {
  id          String   @id @default(uuid())
  name        String
  location    String
  size        Float
  cropType    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  sensors     Sensor[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sensor {
  id        String   @id @default(uuid())
  type      String
  value     Float
  timestamp DateTime @default(now())
  farmId    String
  farm      Farm     @relation(fields: [farmId], references: [id])
} 